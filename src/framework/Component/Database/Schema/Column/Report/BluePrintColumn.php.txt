<?php
namespace Laventure\Component\Database\Schema\Column;

use Exception;
use Laventure\Component\Database\Schema\Column\Contract\BluePrintColumnInterface;
use Laventure\Component\Database\Schema\Exception\ColumnException;


/**
 * @BluePrintColumn
*/
abstract class BluePrintColumn implements BluePrintColumnInterface
{


    const __SPACE__ = ' ';




    /**
     * @var ColumnCollection
    */
    protected $columns;





    /**
     * BluePrintColumn
    */
    public function __construct()
    {
        $this->columns = new ColumnCollection();
    }




    /**
     * @param string $name
     * @param string $type
     * @param int $length
     * @param $default
     * @param bool $autoincrement
     * @return Column
    */
    public function add($name, $type, $length = 11, $default = null, $autoincrement = false): Column
    {
         $column = new Column(
             compact('name', 'type', 'length', 'default', 'autoincrement')
         );

         if ($autoincrement) {
             $column->withParam('primaryKey', 'PRIMARY KEY');
         }

         return $this->columns->addColumn($name, $column);
    }




    /**
     * @param $name
     * @param int $length
     * @return Column
     */
    public function integer($name, int $length = 11): Column
    {
        return $this->add($name, 'integer', $length);
    }



    /**
     * @param string $name
     * @param int $length
     * @return Column
     */
    public function string(string $name, int $length = 255): Column
    {
        return $this->add($name, 'varchar', $length);
    }




    /**
     * @param $name
     * @return Column
    */
    public function text($name): Column
    {
        return $this->add($name, 'text', false);
    }




    /**
     * @param $name
     * @return Column
    */
    public function datetime($name): Column
    {
        return $this->add($name, 'datetime', false);
    }




    /**
     * @return void
    */
    public function timestamps()
    {
        $this->datetime('created_at');
        $this->datetime('updated_at');
    }




    /**
     * @param bool $status
     * @return Column|void
     * @throws Exception
     */
    public function softDeletes(bool $status = false)
    {
        if($status) {
            return $this->boolean('deleted_at');
        }
    }




    /**
     * @inheritDoc
    */
    public function printColumns(): string
    {
        $sql = [];

        $i = 0;

        $nbrColumns = $this->columns->count();

        if ($this->columns->isEmpty()) {
            return '';
        }

        foreach ($this->columns->getColumns() as $column) {

            $sql[] = $this->printWithSpace($column->getName());
            $sql[] = $this->printWithSpace($column->getType());
            if ($default = $column->getDefaultValue()) {
                $sql[] = $default;
            }

            if (is_string($column->params['autoincrement'])) {
                $sql[] = $this->printWithPrefixSpace($column->params['autoincrement']);
            }

            $sql[] = $this->printWithSpace($column->params['primaryKey']);

            ++$i;

            if ($i < $nbrColumns) {
                $sql[] = ', ';
            }

        }

       $sql = strtolower(implode($sql));
        dd($sql);
    }




    /**
     * @param $name
     * @return string
    */
    protected function printWithSpace($name): string
    {
        return sprintf('%s%s', $name, self::__SPACE__);
    }



    /**
     * @param $name
     * @return string
    */
    protected function printWithPrefixSpace($name): string
    {
        return sprintf('%s%s', self::__SPACE__, $name);
    }




    /**
     * @return string
     * @throws ColumnException
    */
    protected function buildTableColumns(): string
    {
        $sql = [];

        $i = 0;

        $nbrColumns = $this->columns->count();

        if ($this->columns->isEmpty()) {
            return '';
        }

        foreach ($this->columns->getColumns() as $column) {

            $sql[] = $this->printWithSpace($column->getName());
            $sql[] = $this->printWithSpace($column->typeString());
            if ($default = $column->defaultValue()) {
                $sql[] = $default;
            }

            if ($autoincrement = $column->autoincrement()) {
                $sql[] = $this->printWithPrefixSpace($autoincrement);
            }

            ++$i;

            if ($i < $nbrColumns) {
                $sql[] = ', ';
            }

        }

        if ($primaryKey = $this->primaryKey()) {
            $sql[] = sprintf(', primary key(%s)', $primaryKey);
        }


        return strtolower(implode($sql));
    }

}